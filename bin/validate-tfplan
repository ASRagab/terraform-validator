#!/usr/bin/env python

import sys
import os.path
from argparse import ArgumentParser

from terraform_validator.validator import TerraformValidator
from terraform_validator.utils import read_rules_file, read_plan_file


def check_file(arg_parser, file_path):
    """
    validate file path passed from command args exists
    :param arg_parser: arg parser
    :param file_path: file path in string
    :return: file path in string
    """
    if not os.path.exists(file_path):
        arg_parser.error("File %s does not exist!" % file_path)
    else:
        return file_path


def validate(rules, tfplan):
    """
    validate the terraform plan against rules
    :param rules: rules array
    :param tfplan: tf plan dictionary
    :return: array of errors
    """
    tf_validator = TerraformValidator(rules)
    return tf_validator.validate(tfplan)


def main():
    """
    Read command line args for terraform plan file and rules file and validate the plan against rules.
    :return:
    """
    parser = ArgumentParser(description="Validate terraform plan file against rules.")
    parser.add_argument("-r", "--rules", dest="rules_file", required=True, help="rules file",
                        metavar="FILE", type=lambda x: check_file(parser, x))
    parser.add_argument("-p", "--plan", dest="plan_file", required=True, help="terraform plan file",
                        metavar="FILE", type=lambda x: check_file(parser, x))

    args = parser.parse_args()

    rules = read_rules_file(args.rules_file)
    tfplan = read_plan_file(args.plan_file)

    resource_errors = validate(rules, tfplan)
    if not resource_errors:
        sys.stdout.write('[PASSED] All resources validated. \n')
        exit(0)
    else:
        for resource_name, rule_name in resource_errors:
            sys.stderr.write('[INVALID] Resource: %s. Rule: %s. \n' % (resource_name, rule_name))
        exit(1)

if __name__ == "__main__":
    main()
